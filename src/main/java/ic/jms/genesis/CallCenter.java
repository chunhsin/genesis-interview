package ic.jms.genesis;

import ic.jms.genesis.employees.Fresher;
import ic.jms.genesis.employees.ProductManager;
import ic.jms.genesis.employees.TechnicalLeader;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class CallCenter {

    private static final int maxFreshers = 10;
    private List<Fresher> fresherList = new ArrayList<>();
    private Employee specialEmployee;
    private ExecutorService executor;

    public CallCenter() {
        executor = Executors.newFixedThreadPool(maxFreshers);
        this.initEmployee();
    }

    public void receiveACall() {
        Optional<Fresher> freeFresher = this.getFreeFresher();
        while (!freeFresher.isPresent()) {
            freeFresher = this.getFreeFresher();
        }
        executor.execute(new CallProcess(freeFresher.get(), specialEmployee));
    }

    private Optional<Fresher> getFreeFresher() {
        return fresherList.stream()
                          .filter(Fresher::isFree)
                          .findFirst();
    }

    private void initEmployee() {
        specialEmployee = Math.random() > 0.5 ? new TechnicalLeader(maxFreshers) : new ProductManager(maxFreshers);
        for (int i = 0; i < maxFreshers; i++) {
            fresherList.add(new Fresher(i));
        }
    }
}
