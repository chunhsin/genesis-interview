package ic.jms.genesis;

import ic.jms.genesis.employees.Fresher;
import ic.jms.genesis.employees.ProductManager;
import ic.jms.genesis.employees.TechnicalLeader;

import java.util.Optional;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class CallCenter {

    private static final int maxFreshers = 10;
    private AtomicInteger receiveCallCount = new AtomicInteger(0);
    private ConcurrentLinkedQueue<Fresher> fresherList = new ConcurrentLinkedQueue<>();
    private TechnicalLeader technicalLeader;
    private ProductManager productManager = new ProductManager(maxFreshers + 2);
    private ExecutorService executor;

    public CallCenter() {
        executor = Executors.newFixedThreadPool(maxFreshers);
        this.initEmployee();
    }

    public void receiveACall() throws InterruptedException {
        Optional<Fresher> freeFresher;
        do {
            freeFresher = this.getFreeFresher();
        } while (!freeFresher.isPresent());
        receiveCallCount.addAndGet(1);
        executor.execute(new CallProcess(freeFresher.get(), technicalLeader, productManager));
    }

    public long getReceiveCallCount() {
        return receiveCallCount.get();
    }

    private Optional<Fresher> getFreeFresher() throws InterruptedException {
        for (Fresher fresher : fresherList) {
            if (fresher.isFree())
                return Optional.of(fresher);
        }
        Thread.sleep(100);

        return Optional.empty();
    }

    private void initEmployee() {
        for (int i = 0; i < maxFreshers; i++) {
            fresherList.add(new Fresher(i));
        }
        technicalLeader = new TechnicalLeader(maxFreshers + 1);
    }
}
